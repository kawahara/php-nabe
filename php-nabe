#!/bin/bash

real=`readlink $0`
if [ $real ]; then
    cd `dirname $real`
else
    cd `dirname $0`
fi

PHP_NABE_PATH=`pwd`

declare -a tmp_params=(${@})
params=()
options=()

with_mysqlnd=true
is_rebuild=false
is_clean_source=false
is_use_git=false

for (( i = 0; i < ${#tmp_params[@]} ; i++ ))
do
    case ${tmp_params[$i]} in

        "--disable-mysqlnd" )

            with_mysqlnd=false
            ;;

        "--rebuild" )

            is_rebuild=true
            ;;

        "--clean-source" )

            is_clean_source=true
            ;;

        "--git" )

            is_use_git=true
            ;;

        "-h" | "--help" )

            params=("help" "${params[@]}")

            ;;
        *)

            if echo "${tmp_params[$i]}" | grep '^-' > /dev/null ; then
                options=("${options[@]}" "${tmp_params[$i]}")
            else
                params=("${params[@]}" "${tmp_params[$i]}")
            fi

            ;;
    esac
done

function isInstalled() {
    if [ -f $PHP_NABE_PATH/installed ]; then
        pattern=`echo $1 | sed -e 's/\./\\\./g'`
        if grep -e "^$pattern$" $PHP_NABE_PATH/installed > /dev/null ; then
            return 1;
        fi
    fi

    return 0;
}

function isInstalledExt() {
    if php-nabe ext-ls | egrep -e "^$1$" > /dev/null ; then
        return 1;
    fi

    return 0;
}

function getCurrentVersion() {
    if [ ! -f $PHP_NABE_PATH/current ]; then
        return 1;
    fi

    cat $PHP_NABE_PATH/current
}

function downloadSrc() {
    if $is_use_git ; then
        downloadSrcFromGit $1
        return $?
    fi


    if [ ! -d $PHP_NABE_PATH/src ]; then
        mkdir $PHP_NABE_PATH/src
    fi

    cd $PHP_NABE_PATH/src

    if $is_clean_source ; then
        rm -fr php-$1
        rm -fr php-$1.tar.gz
    fi

    if [ ! -e php-$1.tar.gz ]; then
        # download 1
        curl -f -L "http://jp1.php.net/get/php-$1.tar.gz/from/this/mirror" > php-$1.tar.gz

        if [ $? -ne 0 ]; then

            mjv=`echo $1 | awk 'match($0, /^[0-9]+\./) { print substr($0,RSTART,RLENGTH-1) }'`

            # download 2
            curl -f -L "http://museum.php.net/php$mjv/php-$1.tar.gz" > php-$1.tar.gz

            if [ $? -ne 0 ]; then

                echo "[ERR] couln't download sourcecode."
                rm php-$1.tar.gz

                return 1;
            fi
        fi
    fi

    if [ ! -d php-$1 ]; then
        tar zxvf php-$1.tar.gz
    fi

    rm php-src
    ln -s php-$1 php-src

    return 0;
}

function buildAutoconf() {
    # install autoconf-2.59d
    if [ ! -d $PHP_NABE_PATH/build/autoconf-2.59d ]; then
        if [ ! -d $PHP_NABE_PATH/src ]; then
            mkdir $PHP_NABE_PATH/src
        fi

        cd $PHP_NABE_PATH/src
        if [ ! -d $PHP_NABE_PATH/src/autoconf ]; then
            git clone https://github.com/kergoth/autoconf
        fi
        cd autoconf

        git clean -df
        git checkout AUTOCONF-2.59d
        if [ $? -ne 0 ]; then
            echo "failed to checkout autoconf-2.59d"
            exit 1;
        fi

        ./configure --prefix=$PHP_NABE_PATH/build/autoconf-2.59d
        if [ $? -ne 0 ]; then
            echo "failed to configure"
            exit 1;
        fi

        make
        if [ $? -ne 0 ]; then
            exit 1;
        fi

        make install
        if [ $? -ne 0 ]; then
            exit 1;
        fi
    fi

    export PHP_AUTOCONF=$PHP_NABE_PATH/build/autoconf-2.59d/bin/autoconf
}


function downloadSrcFromGit() {
    if [ ! -d $PHP_NABE_PATH/src ]; then
        mkdir $PHP_NABE_PATH/src
    fi

    cd $PHP_NABE_PATH/src

    if [ ! -d $PHP_NABE_PATH/src/php-src-git ]; then
        git clone https://github.com/php/php-src.git php-src-git
    fi

    cd $PHP_NABE_PATH/src/php-src-git
    git checkout .
    git clean -fd
    git fetch

    git checkout php-$1

    if [ $? -ne 0 ]; then
        echo "[ERR] could't download sourcecode."

        return 1;
    fi

    cd ..
    rm php-src
    ln -s php-src-git php-src

    return 0;
}

function checkFpmProcess() {
    version=$1
    PHP_BUILD_PATH=$PHP_NABE_PATH/build/php-$version
    PID_PATH=$PHP_BUILD_PATH/var/run/php-fpm.pid
    if [ ! -f $PID_PATH ]; then
        return 1;
    fi
    ps axu | grep `cat $PID_PATH` > /dev/null

    return $?
}

function php-nabe() {
    case $1 in
        
    "h" | "help" )

        cat <<EOT
Usage: php-nabe <command> [<args>] [<--options>]

Available Commands

    php-nabe setup                   Iniatialize bin directory
    php-nabe help                    Show this help
    php-nabe install <version>       Download php-src and install
    php-nabe ls                      List up installed version
    php-nabe use <version>           Select version
    php-nabe disable                 Disable php under the php-nabe
    php-nabe ext-install <extension> Install an extension
    php-nabe ext-remove <extension>  Disable an extension
    php-nabe ext-ls                  List up installed extension
    php-nabe ext-disable <extension> Disable an extension
    php-nabe ext-enable <extension>  Enable an extension
    php-nabe composer-install        Download composer and install
    php-nabe fpm-start [<listen>]    Start php-fpm
    php-nabe fpm-stop                Stop php-fpm
    php-nabe fpm-reload              Reload php-fpm

Install option

    --disable-mysqlnd  Disable mysqlnd extension
    --rebuild          Rebuild
    --clean-source     Before building, remove old source code
    --git              Get code from git repository

    Also, you can use another option for ./configure

EOT
        exit 0

        ;;

    "setup" )

        if [ ! -a $PHP_NABE_PATH/bin ]; then
            mkdir bin
            ln -s $PHP_NABE_PATH/php-nabe bin/php-nabe
        fi

        ;;

    "install" )

        if [ "$2" = "" ]; then
            exit 1;
        fi

        if ! $is_rebuild ; then
            isInstalled $2
            if [ $? -eq 1 ]; then
                echo "Installed $2"
                exit 1;
            fi
        fi

        buildAutoconf
        downloadSrc $2
        if [ $? -ne 0 ]; then
            exit 1;
        fi

        cd $PHP_NABE_PATH/src/php-src
        ./buildconf --force
        if [ $? -ne 0 ]; then
            exit 1;
        fi

        rm -fr $PHP_NABE_PATH/src/php-src/include/*
        make clean

        # for extension of mysql, mysqli, pdo_mysql
        if $with_mysqlnd ; then
            export PHP_MYSQLND_ENABLED=yes
            mkdir -p include/php/ext/mysqlnd
            cp ext/mysqlnd/*.h include/php/mysqlnd
        fi

        PREFIX=$PHP_NABE_PATH/build/php-$2
        ./configure --prefix=$PREFIX --with-config-file-path=$PREFIX/etc --with-config-file-scan-dir=$PREFIX/etc/conf.d "${options[@]}"

        if [ $? -ne 0 ]; then
            exit 1;
        fi

        make
        if [ $? -ne 0 ]; then
            exit 1;
        fi

        make install
        if [ $? -ne 0 ]; then
            exit 1;
        fi

        cp $PHP_NABE_PATH/src/php-src/php.ini-development $PREFIX/etc/php.ini

        isInstalled $2
        if [ $? -eq 0 ]; then
            echo $2 >> $PHP_NABE_PATH/installed
        fi

        ;;
    "use")

        isInstalled $2
        if [ $? -eq 0 ]; then
            echo "$2 hadn't installed yet."
            exit 1;
        fi

        echo "change version to $2"
        echo $2 > $PHP_NABE_PATH/current

        rm -fr $PHP_NABE_PATH/bin
        ln -s $PHP_NABE_PATH/build/php-$2/bin bin

        rm -fr $PHP_NABE_PATH/etc
        ln -s $PHP_NABE_PATH/build/php-$2/etc etc

        if [ ! -e $PHP_NABE_PATH/bin/php-nabe ]; then
            ln -s $PHP_NABE_PATH/php-nabe bin/php-nabe
        fi

        if [ -e $PHP_NABE_PATH/composer -a ! -e $PHP_NABE_PATH/bin/composer ]; then
            ln -s $PHP_NABE_PATH/composer bin/composer
        fi

        ;;

    "disable")

        rm -f $PHP_NABE_PATH/current
        rm -fr bin
        rm -fr etc
        mkdir bin
        ln -s $PHP_NABE_PATH/php-nabe bin/php-nabe

        ;;

    "ls")

        version=`getCurrentVersion`

        for data in `sort $PHP_NABE_PATH/installed`
        do
            if [ "$version" = "$data" ]; then
                echo "=> "$data
            else
                echo "   "$data
            fi
        done
        ;;

    "ext-install")

        if [ "$2" = "" ]; then
            exit 1;
        fi

        extension_name=${2%-beta}
        version=`getCurrentVersion`
        if [ $? -ne 0 ]; then
            echo "You can not select version."
            exit 1
        fi

        if ! $is_rebuild ; then
            $PHP_NABE_PATH/build/php-$version/bin/php $PHP_NABE_PATH/lib/checkext.php $extension_name
            if [ $? -eq 0 ]; then
                echo "You installed $2 extension already."
                exit 1
            fi
        fi

        downloadSrc $version
        if [ $? -ne 0 ]; then
            exit 1;
        fi

        cd $PHP_NABE_PATH/src/php-src

        if [ -d ext/$2 ]; then
            # ext
            cd ext/$2
            $PHP_NABE_PATH/build/php-$version/bin/phpize
            ./configure --with-php-config=$PHP_NABE_PATH/build/php-$version/bin/php-config "${options[@]}"
            if [ $? -ne 0 ]; then
                exit 1;
            fi

            make
            if [ $? -ne 0 ]; then
                exit 1;
            fi

            make install
            if [ $? -ne 0 ]; then
                exit 1;
            fi

        else
            # pecl
            $PHP_NABE_PATH/build/php-$version/bin/pecl install $2
            if [ $? -ne 0 ]; then
                exit 1;
            fi
        fi

        if [ ! -d $PHP_NABE_PATH/build/php-$version/etc/conf.d ]; then
            mkdir $PHP_NABE_PATH/build/php-$version/etc/conf.d
        fi

        echo "extension=$extension_name.so" > $PHP_NABE_PATH/build/php-$version/etc/conf.d/$extension_name.ini

        ;;

    "ext-remove")

        if [ "$2" = "" ]; then
            exit 1;
            fi

        version=`getCurrentVersion`
        if [ $? -ne 0 ]; then
            echo "You can not select version."
            exit 1
        fi

        rm $PHP_NABE_PATH/build/php-$version/etc/conf.d/$2.ini

        ;;

    "ext-ls")
        version=`getCurrentVersion`
        $PHP_NABE_PATH/build/php-$version/bin/php $PHP_NABE_PATH/lib/listext.php

        ;;

    "ext-enable")
        if [ "$2" = "" ]; then
            exit 1
        fi

        version=`getCurrentVersion`
        if [ $? -ne 0 ]; then
            echo "You can not select version."
            exit 1
        fi

        EXTPATH=`$PHP_NABE_PATH/build/php-$version/bin/php $PHP_NABE_PATH/lib/extpath.php`
        if [ ! -f "$EXTPATH/$2.so" ]; then
            echo "$2 is not installed"
            exit 1
        fi

        isInstalledExt $2
        if [ $? -ne 0 ]; then
            echo "$2 is already enabled"
            exit 1;
        fi

        INI_FILE="$PHP_NABE_PATH/build/php-$version/etc/conf.d/$2.ini"

        if [ -f "$INI_FILE" ]; then
            echo "extension=$2.so" > $INI_FILE
            echo "enable $2"
        fi

        ;;

    "ext-disable")
        if [ "$2" = "" ]; then
            exit 1
        fi

        version=`getCurrentVersion`
        if [ $? -ne 0 ]; then
            echo "You can not select version."
            exit 1
        fi

        INI_FILE="$PHP_NABE_PATH/build/php-$version/etc/conf.d/$2.ini"

        isInstalledExt $2
        if [ $? -ne 1 ]; then
            if [ -f $INI_FILE ]; then
                echo "$1 is disable now"
            else
                echo "$1 is not installed"
            fi
            exit 1;
        fi

        if [ -f "$INI_FILE" ]; then
            echo "" > $INI_FILE
            echo "disable $2"
            return 0
        fi

        echo "$2 is not installed"

        ;;

    "composer-install")

        curl -s http://getcomposer.org/installer | $PHP_NABE_PATH/bin/php

        if [ $? -eq 0 ]; then
            mv composer.phar composer
        fi

        if [ -e $PHP_NABE_PATH/bin -a ! -e $PHP_NABE_PATH/bin/composer ]; then
            ln -s $PHP_NABE_PATH/composer bin/composer
        fi

        ;;

    "fpm-start")

        version=`getCurrentVersion`
        if [ $? -ne 0 ]; then
            echo "You can not select version."
            exit 1
        fi

        PHP_BUILD_PATH=$PHP_NABE_PATH/build/php-$version
        LISTEN=$2

        if [ ! -f $PHP_BUILD_PATH/sbin/php-fpm ]; then
            echo "[ERR]php-fpm is not installed."

            exit 1;
        fi

        if [ ! -f $PHP_BUILD_PATH/etc/php-fpm.conf ]; then
            cp $PHP_BUILD_PATH/etc/php-fpm.conf.default $PHP_BUILD_PATH/etc/php-fpm.conf
        fi

        sed -i.backup -e 's/^\;\{0,1\}pid *=.*/pid = run\/php-fpm\.pid/g' $PHP_BUILD_PATH/etc/php-fpm.conf

        if [ "$LISTEN" != "" ]; then
            LISTEN_E=`echo $LISTEN | sed -e s/\\\\//\\\\\\\\\\\\//g`
            sed -i.backup2 -e 's/^\;\{0,1\}listen *=.*/listen = '$LISTEN_E'/g' $PHP_BUILD_PATH/etc/php-fpm.conf
        fi

        checkFpmProcess $version
        if [ $? -eq 0 ]; then
            echo "[ERR] There is a process for php-fpm."
            exit 1;
        fi

        $PHP_BUILD_PATH/sbin/php-fpm

        ;;

    "fpm-stop")

        version=`getCurrentVersion`
        if [ $? -ne 0 ]; then
            echo "You can not select version."
            exit 1
        fi

        PHP_BUILD_PATH=$PHP_NABE_PATH/build/php-$version

        checkFpmProcess $version
        if [ $? -eq 1 ]; then
            echo "[ERR] There is no process for php-fpm"
            exit 1;
        fi

        PID_PATH=$PHP_BUILD_PATH/var/run/php-fpm.pid

        kill `cat $PID_PATH`

        ;;

    "fpm-reload")

        version=`getCurrentVersion`
        if [ $? -ne 0 ]; then
            echo "You can not select version."
            exit 1
        fi

        PHP_BUILD_PATH=$PHP_NABE_PATH/build/php-$version

        checkFpmProcess $version
        if [ $? -eq 1 ]; then
            echo "[ERR] There is no process for php-fpm"
            exit 1;
        fi

        PID_PATH=$PHP_BUILD_PATH/var/run/php-fpm.pid

        kill -USR2 `cat $PID_PATH`

        ;;

    *)

        echo "Unknown command"
        php-nabe "help"

    esac
}

[ ${#params[@]} -eq 0 ] && php-nabe "help" && exit 1;

php-nabe "${params[@]}"
